version: '2.1'

x-logging:
  &default-logging
  options:
    max-file: '1'
    compress: 'false'
  driver: local

networks:
  monitor-net:
    driver: bridge

volumes:
    prometheus_data_mainnet: {}
    prometheus_data_testnet: {}
    grafana_data_mainnet: {}
    grafana_data_testnet: {}
    postgres_data: {}
    postgres_mainnet_agent_data: {}
    postgres_testnet_agent_data: {}
    nginx_certs: {}
    nginx_vhost: {}
    nginx_html: {}
    nginx_acme: {}

services:

######################################################################################
#####################         CLI MAINNET CONTAINER            #######################
######################################################################################

  cli-mainnet:
    build:
      context: ./cli_mainnet
    container_name: cli-mainnet
    restart: unless-stopped
    environment:
      GEO_COORDINATES: ${GEO_COORDINATES:-69.42069 69.42069}
    tty: true
    networks:
      - monitor-net
    logging: *default-logging
    volumes:
      - ./cli/scripts:/home/graph/scripts

######################################################################################
#####################        CLI TESTNET CONTAINER             #######################
######################################################################################

  cli-testnet:
    build:
      context: ./cli_testnet
    container_name: cli-testnet
    restart: unless-stopped
    environment:
      GEO_COORDINATES: ${GEO_COORDINATES:-69.42069 69.42069}
    tty: true
    networks:
      - monitor-net
    logging: *default-logging
    volumes:
      - ./cli/scripts:/home/graph/scripts


######################################################################################
#####################    INDEXER SERVICE MAINNET CONTAINER     #######################
######################################################################################

  indexer-service-mainnet:
    image: ${INDEXER_SERVICE_MAINNET_VERSION:-ghcr.io/graphprotocol/indexer-service:v0.20.8}
    container_name: indexer-service-mainnet
    depends_on:
      - index-node-0
      - query-node-0
      - indexer-agent-mainnet
      - postgres-mainnet-agent
      #- vector-node
    environment:
      INDEXER_SERVICE_MNEMONIC: ${OPERATOR_SEED_PHRASE_MAINNET}
      INDEXER_SERVICE_INDEXER_ADDRESS: ${STAKING_WALLET_ADDRESS_MAINNET}
      INDEXER_SERVICE_PORT: 7600
      INDEXER_SERVICE_ETHEREUM_NETWORK: goerli
      INDEXER_SERVICE_ETHEREUM: ${TXN_RPC_MAINNET}
      INDEXER_SERVICE_GRAPH_NODE_QUERY_ENDPOINT: http://query-node-0:8000
      INDEXER_SERVICE_GRAPH_NODE_STATUS_ENDPOINT: http://index-node-0:8030/graphql
      INDEXER_SERVICE_NETWORK_SUBGRAPH_ENDPOINT: ${INDEXER_SERVICE_NETWORK_SUBGRAPH_ENDPOINT_MAINNET:-https://gateway.testnet.thegraph.com/network}
      INDEXER_SERVICE_NETWORK_SUBGRAPH_DEPLOYMENT: ${NETWORK_SUBGRAPH_DEPLOYMENT_MAINNET}
      INDEXER_SERVICE_POSTGRES_HOST: postgres-mainnet-agent
      INDEXER_SERVICE_POSTGRES_USERNAME: ${DB_USER:-graph-node}
      INDEXER_SERVICE_POSTGRES_PASSWORD: ${DB_PASS:-db-password}
      INDEXER_SERVICE_POSTGRES_DATABASE: ${AGENT_DB_NAME_MAINNET:-indexer-agent-mainnet}
      INDEXER_SERVICE_WALLET_WORKER_THREADS: ${WORKER_THREADS_PER_INDEXER_SERVICE:-8}
      #INDEXER_SERVICE_VECTOR_NODE: "http://vector-node:8000"
      #INDEXER_SERVICE_VECTOR_ROUTER: "vector8BSZxfkr62As6KZX2so4yXuex5XcpPXQ2tYZrBqpub94dAobu7"
      INDEXER_SERVICE_CLIENT_SIGNER_ADDRESS: "0xe1EC4339019eC9628438F8755f847e3023e4ff9c"
      SKIP_EVM_VALIDATION: "true"
      VIRTUAL_HOST: ${INDEX_HOST_MAINNET}
      VIRTUAL_PORT: 7600
      LETSENCRYPT_HOST: ${INDEX_HOST_MAINNET}
    expose:
      - 7300
      - 7600
    networks:
      - monitor-net
    restart: unless-stopped
    logging: *default-logging

######################################################################################
#####################     INDEXER SERVICE TESTNET CONTAINER    #######################
######################################################################################

  indexer-service-testnet:
    image: ${INDEXER_SERVICE_TESTNET_VERSION:-ghcr.io/graphprotocol/indexer-service:v0.20.8}
    container_name: indexer-service-testnet
    depends_on:
      - index-node-0
      - query-node-1
      - indexer-agent-testnet
      - postgres-testnet-agent
      #- vector-node
    environment:
      INDEXER_SERVICE_MNEMONIC: ${OPERATOR_SEED_PHRASE_TESTNET}
      INDEXER_SERVICE_INDEXER_ADDRESS: ${STAKING_WALLET_ADDRESS_TESTNET}
      INDEXER_SERVICE_PORT: 7600
      INDEXER_SERVICE_ETHEREUM_NETWORK: arbitrum-goerli
      INDEXER_SERVICE_ETHEREUM: ${TXN_RPC_TESTNET}
      INDEXER_SERVICE_GRAPH_NODE_QUERY_ENDPOINT: http://query-node-1:8000
      INDEXER_SERVICE_GRAPH_NODE_STATUS_ENDPOINT: http://index-node-0:8030/graphql
      INDEXER_SERVICE_NETWORK_SUBGRAPH_ENDPOINT: ${INDEXER_SERVICE_NETWORK_SUBGRAPH_ENDPOINT_TESTNET:-https://thegraph.com/hosted-service/subgraph/graphprotocol/graph-network-arbitrum-goerli}
      INDEXER_SERVICE_NETWORK_SUBGRAPH_DEPLOYMENT: ${NETWORK_SUBGRAPH_DEPLOYMENT_TESTNET}
      INDEXER_SERVICE_POSTGRES_HOST: postgres-testnet-agent
      INDEXER_SERVICE_POSTGRES_USERNAME: ${DB_USER:-graph-node}
      INDEXER_SERVICE_POSTGRES_PASSWORD: ${DB_PASS:-db-password}
      INDEXER_SERVICE_POSTGRES_DATABASE: ${AGENT_DB_NAME_TESTNET:-postgres-testnet-agent}
      INDEXER_SERVICE_WALLET_WORKER_THREADS: ${WORKER_THREADS_PER_INDEXER_SERVICE:-8}
      #INDEXER_SERVICE_VECTOR_NODE: "http://vector-node:8000"
      #INDEXER_SERVICE_VECTOR_ROUTER: "vector8BSZxfkr62As6KZX2so4yXuex5XcpPXQ2tYZrBqpub94dAobu7"
      INDEXER_SERVICE_CLIENT_SIGNER_ADDRESS: "0xac01B0b3B2Dc5D8E0D484c02c4d077C15C96a7b4"
      SKIP_EVM_VALIDATION: "true"
      VIRTUAL_HOST: ${INDEX_HOST_TESTNET}
      VIRTUAL_PORT: 7600
      LETSENCRYPT_HOST: ${INDEX_HOST_TESTNET}
    expose:
      - 7300
      - 7600
    networks:
      - monitor-net
    restart: unless-stopped
    logging: *default-logging



######################################################################################
#####################    INDEXER AGENT MAINNET CONTAINER       #######################
######################################################################################

  indexer-agent-mainnet:
    image: ${INDEXER_AGENT_MAINNET_VERSION:-ghcr.io/graphprotocol/indexer-agent:v0.20.8}
    container_name: indexer-agent-mainnet
    depends_on:
      - index-node-0
      - query-node-0
      - postgres-mainnet-agent
      #- vector-node
    expose:
      - 7300
      - 8000
      - 8001
      - 8002
    environment:
      INDEXER_AGENT_MNEMONIC: ${OPERATOR_SEED_PHRASE_MAINNET}
      INDEXER_AGENT_INDEXER_ADDRESS: ${STAKING_WALLET_ADDRESS_MAINNET}
      INDEXER_AGENT_INDEX_NODE_IDS: "index_node_0"
      INDEXER_AGENT_INJECT_DAI: "true"
      INDEXER_AGENT_REBATE_CLAIM_TRESHOLD: ${REBATE_CLAIM_TRESHOLD_MAINNET:-200}
      INDEXER_AGENT_REBATE_CLAIM_BATCH_THRESHOLD: ${REBATE_CLAIM_BATCH_THRESHOLD_MAINNET:-2000}
      INDEXER_AGENT_REBATE_CLAIM_MAX_BATCH_SIZE: ${REBATE_CLAIM_MAX_BATCH_SIZE_MAINNET:-100}
      INDEXER_AGENT_VOUCHER_REDEMPTION_THRESHOLD: ${VOUCHER_REDEMPTION_THRESHOLD_MAINNET:-200}
      INDEXER_AGENT_VOUCHER_REDEMPTION_BATCH_THRESHOLD: ${VOUCHER_REDEMPTION_BATCH_THRESHOLD_MAINNET:-2000}
      INDEXER_AGENT_VOUCHER_REDEMPTION_MAX_BATCH_SIZE: ${VOUCHER_REDEMPTION_MAX_BATCH_SIZE_MAINNET:-100}
      INDEXER_AGENT_ETHEREUM_NETWORK: mainnet
      INDEXER_AGENT_ETHEREUM: ${TXN_RPC_MAINNET}
      INDEXER_AGENT_GRAPH_NODE_QUERY_ENDPOINT: http://query-node-0:8000
      INDEXER_AGENT_GRAPH_NODE_STATUS_ENDPOINT: http://index-node-0:8030/graphql
      INDEXER_AGENT_GRAPH_NODE_ADMIN_ENDPOINT: http://index-node-0:8020
      INDEXER_AGENT_PUBLIC_INDEXER_URL: 'https://${INDEX_HOST_MAINNET}/'
      INDEXER_AGENT_INDEXER_GEO_COORDINATES: ${GEO_COORDINATES:-60.16952 24.93545}
      INDEXER_AGENT_NETWORK_SUBGRAPH_ENDPOINT: ${INDEXER_AGENT_NETWORK_SUBGRAPH_ENDPOINT_MAINNET:-https://gateway.testnet.thegraph.com/network}
      INDEXER_AGENT_EPOCH_SUBGRAPH_ENDPOINT: ${INDEXER_AGENT_EPOCH_SUBGRAPH_ENDPOINT_MAINNET:-https://api.thegraph.com/subgraphs/name/graphprotocol/goerli-epoch-block-oracle}
      INDEXER_AGENT_NETWORK_SUBGRAPH_DEPLOYMENT: ${NETWORK_SUBGRAPH_DEPLOYMENT_MAINNET}
      INDEXER_AGENT_POSTGRES_HOST: ${AGENT_DB_HOST:-postgres-mainnet-agent}
      INDEXER_AGENT_POSTGRES_USERNAME: ${DB_USER:-graph-node}
      INDEXER_AGENT_POSTGRES_PASSWORD: ${DB_PASS:-db-password}
      INDEXER_AGENT_POSTGRES_DATABASE: ${AGENT_DB_NAME_MAINNET:-postgres-mainnet-agent}
      INDEXER_AGENT_DAI_CONTRACT: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
      #INDEXER_AGENT_VECTOR_NODE: "http://vector-node:8000"
      #INDEXER_AGENT_VECTOR_EVENT_SERVER: "http://indexer-agent:8001"
      #INDEXER_AGENT_VECTOR_EVENT_SERVER_PORT: 8001
      #INDEXER_AGENT_VECTOR_ROUTER: "vector8BSZxfkr62As6KZX2so4yXuex5XcpPXQ2tYZrBqpub94dAobu7"
      INDEXER_AGENT_COLLECT_RECEIPTS_ENDPOINT: https://gateway.testnet.thegraph.com/collect-receipts
      INDEXER_AGENT_OFFCHAIN_SUBGRAPHS: ${INDEXER_AGENT_OFFCHAIN_SUBGRAPHS}
      INDEXER_AGENT_GAS_PRICE_MAX: ${INDEXER_AGENT_GAS_PRICE_MAX_MAINNET:-50}
    networks:
      - monitor-net
    restart: unless-stopped
    logging: *default-logging

######################################################################################
#####################     INDEXER AGENT TESTNET CONTAINER      #######################
######################################################################################

  indexer-agent-testnet:
    image: ${INDEXER_AGENT_TESTNET_VERSION:-ghcr.io/graphprotocol/indexer-agent:v0.20.8}
    container_name: indexer-agent-testnet
    depends_on:
      - index-node-0
      - query-node-1
      - postgres-testnet-agent
      #- vector-node
    expose:
      - 7300
      - 8000
      - 8001
      - 8002
    environment:
      INDEXER_AGENT_MNEMONIC: ${OPERATOR_SEED_PHRASE_TESTNET}
      INDEXER_AGENT_INDEXER_ADDRESS: ${STAKING_WALLET_ADDRESS_TESTNET}
      INDEXER_AGENT_INDEX_NODE_IDS: "index_node_0"
      INDEXER_AGENT_INJECT_DAI: "true"
      INDEXER_AGENT_REBATE_CLAIM_TRESHOLD: ${REBATE_CLAIM_TRESHOLD_TESTNET:-0}
      INDEXER_AGENT_REBATE_CLAIM_BATCH_THRESHOLD: ${REBATE_CLAIM_BATCH_THRESHOLD_TESTNET:-0}
      INDEXER_AGENT_REBATE_CLAIM_MAX_BATCH_SIZE: ${REBATE_CLAIM_MAX_BATCH_SIZE_TESTNET:-100}
      INDEXER_AGENT_VOUCHER_REDEMPTION_THRESHOLD: ${VOUCHER_REDEMPTION_THRESHOLD_TESTNET:-0}
      INDEXER_AGENT_VOUCHER_REDEMPTION_BATCH_THRESHOLD: ${VOUCHER_REDEMPTION_BATCH_THRESHOLD_TESTNET:-0}
      INDEXER_AGENT_VOUCHER_REDEMPTION_MAX_BATCH_SIZE: ${VOUCHER_REDEMPTION_MAX_BATCH_SIZE_TESTNET:-100}
      INDEXER_AGENT_ETHEREUM_NETWORK: arbitrum-goerli
      INDEXER_AGENT_ETHEREUM: ${TXN_RPC_TESTNET}
      INDEXER_AGENT_GRAPH_NODE_QUERY_ENDPOINT: http://query-node-1:8000
      INDEXER_AGENT_GRAPH_NODE_STATUS_ENDPOINT: http://index-node-0:8030/graphql
      INDEXER_AGENT_GRAPH_NODE_ADMIN_ENDPOINT: http://index-node-0:8020
      INDEXER_AGENT_PUBLIC_INDEXER_URL: 'https://${INDEX_HOST_TESTNET}/'
      INDEXER_AGENT_INDEXER_GEO_COORDINATES: ${GEO_COORDINATES:-60.16952 24.93545}
      INDEXER_AGENT_NETWORK_SUBGRAPH_ENDPOINT: ${INDEXER_AGENT_NETWORK_SUBGRAPH_ENDPOINT_TESTNET:-https://thegraph.com/hosted-service/subgraph/graphprotocol/graph-network-arbitrum-goerli}
      INDEXER_AGENT_NETWORK_SUBGRAPH_DEPLOYMENT: ${NETWORK_SUBGRAPH_DEPLOYMENT_TESTNET}
      INDEXER_AGENT_EPOCH_SUBGRAPH_ENDPOINT: ${INDEXER_AGENT_EPOCH_SUBGRAPH_ENDPOINT_TESTNET:-https://thegraph.com/hosted-service/subgraph/juanmardefago/arb-goerli-epoch-block-oracle}
      INDEXER_AGENT_POSTGRES_HOST: ${AGENT_DB_HOST:-postgres-testnet-agent}
      INDEXER_AGENT_POSTGRES_USERNAME: ${DB_USER:-graph-node}
      INDEXER_AGENT_POSTGRES_PASSWORD: ${DB_PASS:-db-password}
      INDEXER_AGENT_POSTGRES_DATABASE: ${AGENT_DB_NAME_TESTNET:-postgres-testnet-agent}
      INDEXER_AGENT_DAI_CONTRACT: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
      #INDEXER_AGENT_VECTOR_NODE: "http://vector-node:8000"
      #INDEXER_AGENT_VECTOR_EVENT_SERVER: "http://indexer-agent:8001"
      #INDEXER_AGENT_VECTOR_EVENT_SERVER_PORT: 8001
      #INDEXER_AGENT_VECTOR_ROUTER: "vector8BSZxfkr62As6KZX2so4yXuex5XcpPXQ2tYZrBqpub94dAobu7"
      INDEXER_AGENT_COLLECT_RECEIPTS_ENDPOINT: https://gateway-testnet-arbitrum.network.thegraph.com/collect-receipts
      INDEXER_AGENT_OFFCHAIN_SUBGRAPHS: ${INDEXER_AGENT_OFFCHAIN_SUBGRAPHS}
      INDEXER_AGENT_GAS_PRICE_MAX: ${INDEXER_AGENT_GAS_PRICE_MAX_TESTNET:-50}
    networks:
      - monitor-net
    restart: unless-stopped
    logging: *default-logging




######################################################################################
#####################           INDEX NODE CONTAINER 0         #######################
######################################################################################


  index-node-0:
    image: ${GRAPH_NODE_VERSION:-graphprotocol/graph-node:v0.29.0}
    container_name: index-node-0
    depends_on:
      - postgres
      - postgres-mainnet-agent
      - postgres-testnet-agent
    volumes:
      - ./graph-node-configs:/root/graph-node-configs/
      - ./postgres-socket:/var/run/postgresql
    environment:
      GRAPH_NODE_CONFIG: /root/graph-node-configs/config.toml
      postgres_host: ${DB_HOST:-postgres}
      postgres_user: ${DB_USER:-graph-node}
      postgres_pass: ${DB_PASS:-db-password}
      postgres_db: ${GRAPH_NODE_DB_NAME:-graph-node}
      ipfs: '${IPFS_ENDPOINT:-https://ipfs.network.thegraph.com/ipfs/}'
      node_role: index-node
      node_id: index_node_0
      CHAIN_0_NAME: ${CHAIN_0_NAME}
      CHAIN_0_RPC: ${CHAIN_0_RPC}
      CHAIN_0_FEATURES: ${CHAIN_0_FEATURES}
      CHAIN_1_NAME: ${CHAIN_1_NAME}
      CHAIN_1_RPC: ${CHAIN_1_RPC}
      CHAIN_1_FEATURES: ${CHAIN_1_FEATURES}
      BLOCK_INGESTOR: index_node_0
      RUST_LOG: INFO
      GRAPH_LOG: ${GRAPHNODE_LOGLEVEL:-DEBUG}
      GRAPH_ETH_CALL_GAS: 50000000
      GRAPH_GETH_ETH_CALL_ERRORS: "out of gas"
      GRAPH_MAX_GAS_PER_HANDLER: 1000000000000000
      ETHEREUM_TRACE_STREAM_STEP_SIZE: ${ETHEREUM_TRACE_STREAM_STEP_SIZE:-50}
      ETHEREUM_BLOCK_BATCH_SIZE: ${ETHEREUM_BLOCK_BATCH_SIZE:-10}
      ETHEREUM_RPC_MAX_PARALLEL_REQUESTS: ${ETHEREUM_RPC_MAX_PARALLEL_REQUESTS:-64}
      GRAPH_ETHEREUM_MAX_BLOCK_RANGE_SIZE: ${GRAPH_ETHEREUM_MAX_BLOCK_RANGE_SIZE:-500}
      GRAPH_ETHEREUM_TARGET_TRIGGERS_PER_BLOCK_RANGE: ${GRAPH_ETHEREUM_TARGET_TRIGGERS_PER_BLOCK_RANGE:-200}
      GRAPH_KILL_IF_UNRESPONSIVE: "true"
      GRAPH_ALLOW_NON_DETERMINISTIC_FULLTEXT_SEARCH: ${FULLTEXT_SEARCH:-true}
      EXPERIMENTAL_SUBGRAPH_VERSION_SWITCHING_MODE: synced
    restart: unless-stopped
    expose:
      - 8001
      - 8000
      - 8030
      - 8040
    networks:
      - monitor-net
    logging: *default-logging





######################################################################################
#####################        QUERY NODE CONTAINER MAINNET      #######################
######################################################################################


  query-node-0:
    image: ${GRAPH_NODE_VERSION:-graphprotocol/graph-node:v0.29.0}
    container_name: query-node-0
    depends_on:
      - postgres
      - postgres-mainnet-agent
    volumes:
      - ./graph-node-configs:/root/graph-node-configs/
      - ./postgres-socket:/var/run/postgresql
    environment:
      GRAPH_NODE_CONFIG: /root/graph-node-configs/config.toml
      postgres_host: ${DB_HOST:-postgres}
      postgres_user: ${DB_USER:-graph-node}
      postgres_pass: ${DB_PASS:-db-password}
      postgres_db: ${GRAPH_NODE_DB_NAME:-graph-node}
      ipfs: '${IPFS_ENDPOINT:-https://ipfs.network.thegraph.com/ipfs/}'
      node_role: query-node
      node_id: query_node_0
      RUST_LOG: INFO
      GRAPH_LOG: INFO
      GRAPH_ETH_CALL_GAS: 50000000
      GRAPH_GETH_ETH_CALL_ERRORS: "out of gas"
      GRAPH_MAX_GAS_PER_HANDLER: 1000000000000000
      GRAPH_LOG_QUERY_TIMING: gql
      EXPERIMENTAL_SUBGRAPH_VERSION_SWITCHING_MODE: synced
      GRAPH_KILL_IF_UNRESPONSIVE: "true"
      GRAPH_LOG_QUERY_TIMING: ${GRAPH_LOG_QUERY_TIMING:-gql}
      GRAPH_ALLOW_NON_DETERMINISTIC_FULLTEXT_SEARCH: ${FULLTEXT_SEARCH:-true}
      #VIRTUAL_HOST: ${QUERY_HOST_MAINNET}
      #VIRTUAL_PORT: 8000
      #LETSENCRYPT_HOST: ${QUERY_HOST_MAINNET}
    restart: unless-stopped
    logging:
        driver: "journald"
    expose:
      - 8001
      - 8000
      - 8020
      - 8030
      - 8040
    networks:
      - monitor-net

######################################################################################
#####################       QUERY NODE CONTAINER TESTNET       #######################
######################################################################################


  query-node-1:
    image: ${GRAPH_NODE_VERSION:-graphprotocol/graph-node:v0.29.0}
    container_name: query-node-1
    depends_on:
      - postgres
      - postgres-testnet-agent
    volumes:
      - ./graph-node-configs:/root/graph-node-configs/
      - ./postgres-socket:/var/run/postgresql
    environment:
      GRAPH_NODE_CONFIG: /root/graph-node-configs/config.toml
      postgres_host: ${DB_HOST:-postgres}
      postgres_user: ${DB_USER:-graph-node}
      postgres_pass: ${DB_PASS:-db-password}
      postgres_db: ${GRAPH_NODE_DB_NAME:-graph-node}
      ipfs: '${IPFS_ENDPOINT:-https://ipfs.network.thegraph.com/ipfs/}'
      node_role: query-node
      node_id: query_node_1
      RUST_LOG: INFO
      GRAPH_LOG: INFO
      GRAPH_ETH_CALL_GAS: 50000000
      GRAPH_GETH_ETH_CALL_ERRORS: "out of gas"
      GRAPH_MAX_GAS_PER_HANDLER: 1000000000000000
      GRAPH_LOG_QUERY_TIMING: gql
      EXPERIMENTAL_SUBGRAPH_VERSION_SWITCHING_MODE: synced
      GRAPH_KILL_IF_UNRESPONSIVE: "true"
      GRAPH_LOG_QUERY_TIMING: ${GRAPH_LOG_QUERY_TIMING:-gql}
      GRAPH_ALLOW_NON_DETERMINISTIC_FULLTEXT_SEARCH: ${FULLTEXT_SEARCH:-true}
      #VIRTUAL_HOST: ${QUERY_HOST_TESTNET}
      #VIRTUAL_PORT: 8000
      #LETSENCRYPT_HOST: ${QUERY_HOST_TESTNET}
    restart: unless-stopped
    logging:
        driver: "journald"
    expose:
      - 8001
      - 8000
      - 8020
      - 8030
      - 8040
    networks:
      - monitor-net




######################################################################################
#####################          NGINX PROXY CONTAINER           #######################
######################################################################################



  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    depends_on:
      - prometheus-mainnet
      - prometheus-testnet
      - query-node-0
      - query-node-1
      - indexer-service-mainnet
      - indexer-service-testnet
      - grafana-mainnet
      - grafana-testnet
    environment:
      PROMETHEUS_HOST_MAINNET: ${PROMETHEUS_HOST_MAINNET}
      PROMETHEUS_HOST_TESTNET: ${PROMETHEUS_HOST_TESTNET}
      HTTP_AUTH_LOGIN: ${HTTP_AUTH_USER}
      HTTP_AUTH_PASSWORD: ${HTTP_AUTH_PASSWORD}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
      - ./nginx-proxy/htpasswd:/etc/nginx/htpasswd
      - ./nginx-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - monitor-net
    restart: unless-stopped
    logging: *default-logging


######################################################################################
#####################            NGINX SSL CONTAINER           #######################
######################################################################################


  nginx-ssl:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: nginx-ssl
    depends_on:
      - prometheus-mainnet
      - prometheus-testnet
      - query-node-0
      - query-node-1
      - indexer-service-mainnet
      - indexer-service-testnet
      - grafana-mainnet
      - grafana-testnet
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
      - nginx_acme:/etc/acme.sh
      - ./nginx-proxy/htpasswd:/etc/nginx/htpasswd
    restart: unless-stopped
    networks:
      - monitor-net
    restart: unless-stopped
    environment:
      NGINX_PROXY_CONTAINER: nginx-proxy
      DEFAULT_EMAIL: ${EMAIL}
    logging: *default-logging



######################################################################################
#####################            POSTGRES CONTAINER            #######################
######################################################################################



  postgres:
    image: postgres:14.5
    container_name: postgres
    command: ["postgres", "-c", "shared_preload_libraries=pg_stat_statements"]
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-graph-node}
      POSTGRES_PASSWORD: ${DB_PASS:-db-password}
      POSTGRES_DB: ${GRAPH_NODE_DB_NAME:-graph-node}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-socket:/var/run/postgresql
    networks:
      - monitor-net
    expose:
      - 5432
    logging: *default-logging



######################################################################################
#####################    POSTGRES AGENT MAINNET CONTAINER      #######################
######################################################################################



  postgres-mainnet-agent:
    image: postgres:14.5
    container_name: postgres-mainnet-agent
    command: ["postgres", "-c", "shared_preload_libraries=pg_stat_statements"]
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-graph-node}
      POSTGRES_PASSWORD: ${DB_PASS:-db-password}
      POSTGRES_DB: ${AGENT_DB_NAME_MAINNET:-indexer-agent}
    volumes:
      - postgres_mainnet_agent_data:/var/lib/postgresql/data
    networks:
      - monitor-net
    expose:
      - 5432
    logging: *default-logging


######################################################################################
#####################    POSTGRES AGENT TESTNET CONTAINER      #######################
######################################################################################



  postgres-testnet-agent:
    image: postgres:14.5
    container_name: postgres-testnet-agent
    command: ["postgres", "-c", "shared_preload_libraries=pg_stat_statements"]
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-graph-node}
      POSTGRES_PASSWORD: ${DB_PASS:-db-password}
      POSTGRES_DB: ${AGENT_DB_NAME_TESTNET:-indexer-agent}
    volumes:
      - postgres_testnet_agent_data:/var/lib/postgresql/data
    networks:
      - monitor-net
    expose:
      - 5432
    logging: *default-logging


######################################################################################
#####################     PROMETHEUS MAINNET CONTAINER         #######################
######################################################################################



  prometheus-mainnet:
    image: prom/prometheus
    container_name: prometheus-mainnet
    environment:
      VIRTUAL_HOST: ${PROMETHEUS_HOST_MAINNET}
      VIRTUAL_PORT: 9090
      LETSENCRYPT_HOST: ${PROMETHEUS_HOST_MAINNET}
    volumes:
      - ./prometheus_mainnet:/etc/prometheus
      - prometheus_data_mainnet:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    logging: *default-logging

######################################################################################
#####################      PROMETHEUS TESTNET CONTAINER        #######################
######################################################################################



  prometheus-testnet:
    image: prom/prometheus
    container_name: prometheus-testnet
    environment:
      VIRTUAL_HOST: ${PROMETHEUS_HOST_TESTNET}
      VIRTUAL_PORT: 9090
      LETSENCRYPT_HOST: ${PROMETHEUS_HOST_TESTNET}
    volumes:
      - ./prometheus_testnet:/etc/prometheus
      - prometheus_data_testnet:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    logging: *default-logging



######################################################################################
#####################          ALERT MANAGER CONTAINER         #######################
######################################################################################



  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    logging: *default-logging



######################################################################################
#####################         NODE EXPORTER CONTAINER          #######################
######################################################################################



  nodeexporter:
    image: prom/node-exporter
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    logging: *default-logging



######################################################################################
#####################             CADVISOR CONTAINER           #######################
######################################################################################



  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    logging: *default-logging



######################################################################################
#####################        GRAFANA MAINNET CONTAINER         #######################
######################################################################################



  grafana-mainnet:
    image: grafana/grafana
    container_name: grafana-mainnet
    volumes:
      - grafana_data_mainnet:/var/lib/grafana
      - ./grafana_mainnet/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_BRUTE_FORCE_LOGIN_PROTECTION=true
      - postgres_host=${DB_HOST:-postgres}
      - postgres_user=${DB_USER:-graph-node}
      - postgres_pass=${DB_PASS:-db-password}
      - postgres_db=${GRAPH_NODE_DB_NAME:-graph-node}
      - VIRTUAL_HOST=${GRAFANA_HOST_MAINNET}
      - VIRTUAL_PORT=3000
      - LETSENCRYPT_HOST=${GRAFANA_HOST_MAINNET}
      - GF_INSTALL_PLUGINS=fifemon-graphql-datasource
      - subgraph_endpoint=${SUBGRAPH_ENDPOINT:-https://gateway.thegraph.com/network}
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    logging: *default-logging


######################################################################################
#####################           GRAFANA TESTNET CONTAINER              ###############
######################################################################################



  grafana-testnet:
    image: grafana/grafana
    container_name: grafana-testnet
    volumes:
      - grafana_data_testnet:/var/lib/grafana
      - ./grafana_testnet/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_BRUTE_FORCE_LOGIN_PROTECTION=true
      - postgres_host=${DB_HOST:-postgres}
      - postgres_user=${DB_USER:-graph-node}
      - postgres_pass=${DB_PASS:-db-password}
      - postgres_db=${GRAPH_NODE_DB_NAME:-graph-node}
      - VIRTUAL_HOST=${GRAFANA_HOST_TESTNET}
      - VIRTUAL_PORT=3000
      - LETSENCRYPT_HOST=${GRAFANA_HOST_TESTNET}
      - GF_INSTALL_PLUGINS=fifemon-graphql-datasource
      - subgraph_endpoint=${SUBGRAPH_ENDPOINT:-https://gateway.testnet.thegraph.com/network}
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    logging: *default-logging




######################################################################################
#####################          PUSHGATEWAY CONTAINER           #######################
######################################################################################



  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    logging: *default-logging
